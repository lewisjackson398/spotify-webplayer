{"version":3,"sources":["config.js","hash.js","Player.js","App.js","index.js"],"names":["scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Player","props","backgroundStyles","backgroundImage","album","images","url","progressBarStyles","width","progress_ms","duration_ms","className","src","alt","name","artists","is_playing","style","App","Component","constructor","super","this","state","token","no_data","getCurrentlyPlaying","bind","tick","componentDidMount","_token","access_token","setState","interval","setInterval","componentWillUnmount","clearInterval","$","ajax","type","beforeSend","xhr","setRequestHeader","success","data","render","href","join","ReactDOM","document","getElementById"],"mappings":"iSAAO,MAKMA,EAAS,CAClB,gBACA,8BACA,4BCPEC,EAAOC,OAAOC,SAASF,KACxBG,UAAU,GACVC,MAAM,KACNC,QAAO,SAAUC,EAASC,GACvB,GAAIA,EAAM,CACN,IAAIC,EAAQD,EAAKH,MAAM,KACvBE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAEjD,OAAOF,IACR,IACPL,OAAOC,SAASF,KAAO,GAERA,Q,MCyBAU,MAnCAC,IACX,MAAMC,EAAmB,CACrBC,gBAAgB,OAAD,OAASF,EAAMJ,KAAKO,MAAMC,OAAO,GAAGC,IAApC,MAGbC,EAAoB,CACtBC,MAA4B,IAApBP,EAAMQ,YAAoBR,EAAMJ,KAAKa,YAAe,KAGhE,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,oBACX,yBAAKC,IAAKX,EAAMJ,KAAKO,MAAMC,OAAO,GAAGC,IAAKO,IAAI,aAElD,yBAAKF,UAAU,qBACX,yBAAKA,UAAU,qBAAqBV,EAAMJ,KAAKiB,MAC/C,yBAAKH,UAAU,uBACVV,EAAMJ,KAAKkB,QAAQ,GAAGD,MAE3B,yBAAKH,UAAU,uBACVV,EAAMe,WAAa,UAAY,UAEpC,yBAAKL,UAAU,YACX,yBACIA,UAAU,gBACVM,MAAOV,MAInB,yBAAKI,UAAU,aAAaM,MAAOf,IAAqB,O,MC1BxE,MAAMgB,UAAYC,YAChBC,cACEC,QACAC,KAAKC,MAAQ,CACXC,MAAO,KACP3B,KAAM,CACJO,MAAO,CACLC,OAAQ,CAAC,CAAEC,IAAK,MAElBQ,KAAM,GACNC,QAAS,CAAC,CAAED,KAAM,KAClBJ,YAAa,GAEfM,WAAY,SACZP,YAAa,EACbgB,SAAS,GAGXH,KAAKI,oBAAsBJ,KAAKI,oBAAoBC,KAAKL,MACzDA,KAAKM,KAAON,KAAKM,KAAKD,KAAKL,MAK7BO,oBAEE,IAAIC,EAASxC,EAAKyC,aAEdD,IAEFR,KAAKU,SAAS,CACZR,MAAOM,IAETR,KAAKI,oBAAoBI,IAI3BR,KAAKW,SAAWC,YAAY,IAAMZ,KAAKM,OAAQ,KAGjDO,uBAEEC,cAAcd,KAAKW,UAGrBL,OACMN,KAAKC,MAAMC,OACbF,KAAKI,oBAAoBJ,KAAKC,MAAMC,OAKxCE,oBAAoBF,GAElBa,IAAEC,KAAK,CACLhC,IAAK,uCACLiC,KAAM,MACNC,WAAYC,IACVA,EAAIC,iBAAiB,gBAAiB,UAAYlB,IAEpDmB,QAASC,IAEFA,EAOLtB,KAAKU,SAAS,CACZnC,KAAM+C,EAAK/C,KACXmB,WAAY4B,EAAK5B,WACjBP,YAAamC,EAAKnC,YAClBgB,SAAS,IAVTH,KAAKU,SAAS,CACZP,SAAS,OAgBnBoB,SACE,OACE,yBAAKlC,UAAU,OACb,4BAAQA,UAAU,eACdW,KAAKC,MAAMC,OACX,uBACEb,UAAU,yBACVmC,KAAI,UH9FU,yCG8FV,sBH3FM,mCG2FN,yBH1FS,iCG0FT,kBAA6EzD,EAAO0D,KACtF,OADE,0CAFN,oBASDzB,KAAKC,MAAMC,QAAUF,KAAKC,MAAME,SAC/B,kBAAC,EAAD,CACE5B,KAAMyB,KAAKC,MAAM1B,KACjBmB,WAAYM,KAAKC,MAAMP,WACvBP,YAAaa,KAAKC,MAAMd,cAG3Ba,KAAKC,MAAME,SACV,yGAUGP,QClHf8B,IAASH,OAAO,kBAAC,EAAD,MAASI,SAASC,eAAe,W","file":"static/js/main.6925cef5.chunk.js","sourcesContent":["export const authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\n// Replace with your app's client ID, redirect URI and desired scopes\r\nexport const clientId = \"880f3922e94d4edfbda22b8349231d60\";\r\nexport const redirectUri = \"http://localhost:3000/callback\";\r\nexport const scopes = [\r\n    \"user-top-read\",\r\n    \"user-read-currently-playing\",\r\n    \"user-read-playback-state\",\r\n];","// Get the hash of the url\r\nconst hash = window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(function (initial, item) {\r\n        if (item) {\r\n            var parts = item.split(\"=\");\r\n            initial[parts[0]] = decodeURIComponent(parts[1]);\r\n        }\r\n        return initial;\r\n    }, {});\r\nwindow.location.hash = \"\";\r\n\r\nexport default hash;","import React from \"react\";\r\nimport \"./Player.css\";\r\n\r\nconst Player = props => {\r\n    const backgroundStyles = {\r\n        backgroundImage: `url(${props.item.album.images[0].url})`\r\n    };\r\n\r\n    const progressBarStyles = {\r\n        width: (props.progress_ms * 100 / props.item.duration_ms) + '%'\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"main-wrapper\">\r\n                <div className=\"now-playing__img\">\r\n                    <img src={props.item.album.images[0].url} alt=\"spotify\" />\r\n                </div>\r\n                <div className=\"now-playing__side\">\r\n                    <div className=\"now-playing__name\">{props.item.name}</div>\r\n                    <div className=\"now-playing__artist\">\r\n                        {props.item.artists[0].name}\r\n                    </div>\r\n                    <div className=\"now-playing__status\">\r\n                        {props.is_playing ? \"Playing\" : \"Paused\"}\r\n                    </div>\r\n                    <div className=\"progress\">\r\n                        <div\r\n                            className=\"progress__bar\"\r\n                            style={progressBarStyles}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"background\" style={backgroundStyles} />{\" \"}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Player;","import React, { Component } from \"react\";\nimport $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\"\nimport hash from \"./hash\";\nimport Player from \"./Player\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      no_data: false,\n    };\n\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      this.getCurrentlyPlaying(_token);\n    }\n\n    // set interval for polling every 5 seconds\n    this.interval = setInterval(() => this.tick(), 5000);\n  }\n\n  componentWillUnmount() {\n    // clear the interval to save resources\n    clearInterval(this.interval);\n  }\n\n  tick() {\n    if (this.state.token) {\n      this.getCurrentlyPlaying(this.state.token);\n    }\n  }\n\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // Checks if the data is not empty\n        if (!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n          no_data: false /* We need to \"reset\" the boolean, in case the\n                            user does not give F5 and has opened his Spotify. */\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {!this.state.token && (\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                \"%20\"\n              )}&response_type=token&show_dialog=true`}\n            >\n              Login to Spotify\n            </a>\n          )}\n          {this.state.token && !this.state.no_data && (\n            <Player\n              item={this.state.item}\n              is_playing={this.state.is_playing}\n              progress_ms={this.state.progress_ms}\n            />\n          )}\n          {this.state.no_data && (\n            <p>\n              You need to be playing a song on Spotify, for something to appear here.\n            </p>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}